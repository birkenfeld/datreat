program testvilgi
 implicit none
 double precision :: l     = 1d0
 double precision :: wl4   = 0.1d0
 double precision :: rmesh = 1d10
 integer          :: N     = 10

 double precision :: q, t, sqt, sqt100

 integer          :: m=1
 integer          :: i
 q = 0.1d0
 t = 0.1d0
 
 do i=0,m
   q = 0.02*i
   call NNvilgis(q,t,wl4,l,rmesh,N,sqt)
   call NNvilgis(q,100d0,wl4,l,rmesh,N,sqt100)
   write(*,*)q,t,sqt,sqt100
 enddo


end program testvilgi 


 subroutine NNvilgis(q,t,wl4,l,rmesh,N,sqt)
!==========================================
!
! Implementation of Eq. 30 of 
! [Vilgis and Boue, J. Polymer Science Part B: Polymer Physics, Vol 26, 2291-2301 (1988)]
! the Fourier integral can be done analytically an yields terms as b*exp(-a*t/(p**2+p0**2)/(p**2+p0**2)
! the p-sum is then done explicitly (efficiency increse by observing that all factors can be written as cos*
! i.e. cos(a*n)**2+cos(a*m)**2 = 1/2*(2+cos(a* 2*n) + cos(a *2*m) )
! and cos(a*n)*cos(a*m) = 1/2*(cos(a*(n-m))+cos(a*(n+m))
! thus a sinple coser(n,p) table is suffiecien with index n 0..2N.
! 
  implicit none

  double precision, intent(in)  :: q        ! momentum transfer
  double precision, intent(in)  :: t        ! time
  double precision, intent(in)  :: wl4      ! rouse rate
  double precision, intent(in)  :: l        ! segment length
  double precision, intent(in)  :: rmesh    ! "confinement" length due to the harmonic potential
  integer         , intent(in)  :: N        ! number of segments (summation)
  double precision, intent(out) :: sqt      ! the sqt-value


  double precision, parameter :: Pi = 4d0*atan(1d0)

  double precision :: coser(0:2*N,1:N)
  double precision :: eser(1:N)
  double precision :: rrarr(N,N)  ! just for checking can be removed later

  double precision :: p0, q0, W, pidn, rr

  integer          :: nn, mm, p


  W    = wl4/l**4
  pidn = Pi / N
  q0   = 1d0/rmesh**2
  p0   = q0 * N / Pi

!$OMP PARALLEL DO 
  do p=1,N
    do nn=0,2*N
      coser(nn,p) = cos(pidn*p*nn) / (p**2 + p0**2)
    enddo
  enddo
!$OMP END PARALLEL DO 

!$OMP PARALLEL DO 
  do p=1,N
      eser(p) = exp(-pidn*W*(p**2 + p0**2)*t)
write(*,*)"eser:",p,eser(p), N, pidn, W
  enddo
!$OMP END PARALLEL DO 

  sqt = 0
!$OMP PARALLEL DO PRIVATE(rr) REDUCTION(+:sqt)
  do nn=1,N
    do mm=1,N
      rr = 0
!$OMP PARALLEL DO REDUCTION(+:rr)
      do p=1,N
        rr = rr + 0.5d0*(2*coser(0,p)+coser(2*nn,p)+coser(2*mm,p))  &
                - eser(p)*(coser(abs(nn-mm),p)+coser(nn+mm,p))
      enddo
!$OMP END PARALLEL DO 
      rr  = rr * N / (2*Pi) * 4d0/3d0  ! ???
!if(abs(nn-mm) == 50) write(*,*)nn,mm,rr
      sqt = sqt + exp(-(q*l)**2/6d0 * 2 * rr)
      rrarr(mm,nn) = rr
    enddo
  enddo
!$OMP END PARALLEL DO 
  sqt = sqt / (N*N)  

  

end subroutine NNvilgis
