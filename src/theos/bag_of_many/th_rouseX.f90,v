head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2011.12.08.14.07.15;	author monk;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.08.12.12.06;	author monk;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.08.09.32.39;	author monk;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@      FUNCTION rouseX (x, pa, thnam, parnam, npar, ini, nopar ,params,napar,mbuf) 
!     ===================================================               
!                                                                       
! -------> rousex <-------- with wavelength spread ---                                              
!                                                                       
!                                                                       
      CHARACTER(8) thnam, parnam (20) 
      DIMENSION pa (20), qq (3) 
			integer :: mbuf
			integer, intent(inout) :: nopar                 ! Anzahl der Parameter data
      character*80, intent(inout) :: napar(mbuf)      ! name des parameters n
			real, intent(inout) :: params(mbuf)             ! value des parameters n
			      REAL(8) temp, qz, tau, eta, yz, SQ_rouse, a, b, xi 
      REAL(8) SQ_rouseT 
      REAL(8) a0, sum, sumnorm, qzz, fn 
      REAL(8) epsilon, diff 
      REAL qget, tget , vget
                                                                        

      double precision :: lam_min, lam_max, lam0, lam, dlam, tau0
      double precision :: muelam
                                                                        
                                                                        
      DATA zpi / 6.283185 / 
!                                                                       
! ----- initialisation -----                                            
      IF (ini.eq.0) then 
         thnam = 'rousex' 
         nparx = 10
         IF (npar.lt.nparx) then 
            WRITE (6, 1) thnam, nparx, npar 
    1 FORMAT     (' theory: ',a8,' no of parametrs=',i8,                &
     &      ' exceeds current max. = ',i8)                              
            rousex = 0 
            RETURN 
         ENDIF 
         npar = nparx 
!        --------------> set the number of parameters                   
         parnam (1) = 'intensit' 
         parnam (2) = 'xi_frict' 
         parnam (3) = 'b_segmnt' 
         parnam (4) = 'epsilon ' 
         parnam (5) = 'temp    ' 
         parnam (6) = 'com_diff' 
         parnam (7) = 'lam_min' 
         parnam (8) = 'lam_max' 
         parnam (9) = 'n_lam' 
         parnam (10)= 'muelam'   ! exponent for intensity variation with lambda i.e. Phi~lam**-4,SQ~lam**2 => -2  
                                                                        
!                                                                       
         rousex = 0 
         RETURN 
      ENDIF 
!                                                                       
! ---- calculate theory here -----                                      
      tau = x 
      a0      = pa (1) 
      xi      = abs (pa (2) ) 
      b       = abs (pa (3) ) 
      epsilon = abs (pa (4) ) 
      temp    = pa (5) 
                              ! in cm**2/sec                            
      diff    = abs (pa (6) ) 
      lam_min = pa (7) 
      lam_max = pa (8)
      nqw     = NINT(pa(9))
      muelam  = pa(10) 
                                                                        
                                       ! in A**2/ns                     
      diff = diff * 1d-9 / 1d-16 
                                                                        
      IF (epsilon.eq.0.0d0) epsilon = 1.0d-3 
                                                                        
      qget = 0.01 
      CALL getpar ('q       ', qget,nopar ,params,napar,mbuf, ier)  
      qz = qget 
      IF (ier.ne.0) write (6, * ) 'Warning q not found' 
      IF (temp.eq.0.0d0) then 
         tget = 300.0 
      CALL getpar ('temp    ', tget,nopar ,params,napar,mbuf, ier) 
         temp = tget 
      ENDIF
 
      lam0 = (lam_max+lam_min)/2
      if(lam_min.eq.0d0) then
!!! if lambda-min and lambda-max are present in the parameter list we take them from that source
        vget    = 1
        CALL getpar ('lam_min ', vget ,nopar ,params,napar,mbuf, ier)
        lam_min = vget
        vget    = 1        
        CALL getpar ('lam_max ', vget ,nopar, params,napar,mbuf, ier)  
        lam_max = vget
        vget    = 1      
        CALL getpar ('lambda  ', vget ,nopar ,params,napar,mbuf, ier)
        lam0    = vget        
      endif
                                                                  
                                                                         
      tau0 = tau
      dlam = (lam_max-lam_min)/(2*nqw) 


      IF (nqw.eq.0) then 
        dlam =0d0
      else 
        dlam = (lam_max-lam_min)/(2*nqw)
      ENDIF 
                        

      rousex = 0 
      sum = 0 
      sumnorm = 0 
                                                
      DO i = -nqw, nqw
 
        lam = lam0+i*dlam

        qzz = qz *lam0/lam
        tau = tau0*(lam/lam0)**3

!        write(6,*)i,lam,qzz,tau


!
         fn = (lam/lam0)**muelam   ! here: possible intensity variation due lambda spectrum times S(Q)

         sumnorm = sumnorm + fn 
! --- include center of mass diffusion ---                              
         a = fn * a0 * dexp ( - qzz * qzz * diff * tau) 
                                                                        
         IF (pa (4) .lt.0) then 
            WRITE (6, * ) 'Full rouse computation from scratch!' 
            sum = sum + a * SQ_rouse (tau, qzz, temp, xi, b, epsilon) 
         ELSE 
            sum = sum + a * SQ_rouseT (tau, qzz, temp, xi, b, epsilon) 
         ENDIF 


      enddo 
                 

      tau = tau0
                                                       
      rousex = sum / sumnorm 
!                                                                       
      RETURN 
      END FUNCTION rousex   
@


1.2
log
@*** empty log message ***
@
text
@d17 1
a17 1
      REAL qget, tget 
d87 9
a95 3
        CALL getpar ('lam_min ', sngl(lam_min),nopar ,params,napar,mbuf, ier)        
        CALL getpar ('lam_max ', sngl(lam_max),params,napar,mbuf, ier)        
        CALL getpar ('lambda  ', sngl(lam0),nopar ,params,napar,mbuf, ier)        
@


1.1
log
@Initial revision
@
text
@d21 1
d29 1
a29 1
         nparx = 9 
d48 1
d66 2
a67 1
      nqw     = NINT(pa(9)) 
d82 11
a92 8
      ENDIF 
                                                                        
                                                                        
      rousex = 0 
      sum = 0 
      sumnorm = 0 

      lam0 = (lam_max+lam_min)/2       ! check whether this is corresponds to the nominal tau in the data
d94 1
a94 1
      dlam = (lam_max-lam_min)/(2*nqw) !
d97 4
a100 3
      IF (lam0.eq.0) then 
         nqw = 0 
         dlam =0d0 
d104 3
d108 1
a108 1
      DO i = - nqw, nqw
d115 3
d119 2
a120 5
  
      IF (qzz.gt.0) then 
         fn = 1d0                  ! here: possible intensity variation due lambda spectrum times S(Q)
                                   !       preliminary: assume constant
                                   !
a121 1
                                                                        
d131 2
a132 1
      ENDIF 
@
