 FUNCTION th_locrepdp(x, pa, thnam, parnam, npar,ini, nopar ,params,napar,mbuf)
!================================================================================
!  generalized local reptation expression along the lines of deGennes, 
!  but with finite summation of integrals and lenthscale, 
!  timescale and fluctuation ratio as parameters
!  Journal de Physique, 1981, 42 (5), pp.735-740. <10.1051/jphys:01981004205073500>
      use theory_description 
      implicit none 
      real    :: th_locrepdp
      character(len=8) :: thnam, parnam (*) 
      real    :: pa (*) 
      real    :: x , xh
      integer :: mbuf, nparx, ier, ini, npar, iadda
      integer, intent(inout) :: nopar       
      character(len=80), intent(inout) :: napar(mbuf) 
      real, intent(inout) :: params(mbuf) 
     
      double precision, parameter :: Pi = 4*atan(1d0)
      integer                     :: actual_record_address
     
! the internal parameter representation 
     double precision :: ampli      ! prefactor                                                                       
     double precision :: b          ! fluctuation intensity (relative)                                                
     double precision :: a          ! length scale                                                                    
     double precision :: tau        ! timescale                                                                       
     double precision :: lz         ! total length     

     double precision :: ampdebye    ! prefactor                                                                       
     double precision :: wl4        ! rouse rate                                                                      
     integer          :: n_segmen   ! effective N for summation                                                       
     double precision :: re         ! end-to-end radius of Gaussian coil                                              
     double precision :: temp       ! temperature if not in parameters                                                
     double precision :: com_diff   ! center of mass diffusion (if 0, use Rouse default)                              
     double precision :: pmin       ! minimum mode to be included                                                     
     double precision :: pmax       ! maximum mode to be included                                                    
                                                              
! the reout parameter representation 
     double precision :: Dr         ! diffusion   
     double precision :: W          ! rouse     W
     double precision :: l          ! sqgment length    
                                                                    
     double precision :: sqdeb0, sqdebt
!
 
! the recin parameter representation 
     double precision :: q          ! q-value                                                                         

     double precision :: local_reptation, sqt, sqt0
     double precision, parameter   :: teps = 1d-6
 
     double precision   :: t
!
! ----- initialisation ----- 
    IF (ini.eq.0) then     
       thnam = 'locrepdp'
       nparx =        13
       IF (npar.lt.nparx) then
           WRITE (6,*)' theory: ',thnam,' no of parametrs=',nparx,' exceeds current max. = ',npar
          th_locrepdp = 0
          RETURN
       ENDIF
       npar = nparx
! >>>>> describe theory with >>>>>>> 
       idesc = next_th_desc()
       th_identifier(idesc)   = thnam
       th_explanation(idesc)  = " generalized local reptation expression along the lines of deGennes, " //cr//parspace//&
                                " but with finite summation of integrals and lenthscale," //cr//parspace//&
                                " timescale and fluctuation ratio as parameters"
       th_citation(idesc)     = " Journal de Physique, 1981, 42 (5), pp.735-740. <10.1051/jphys:01981004205073500>"
!       --------------> set the parameter names --->
        parnam ( 1) = 'ampli   '  ! prefactor                                                                       
        parnam ( 2) = 'b       '  ! fluctuation intensity (relative)                                                
        parnam ( 3) = 'a       '  ! length scale                                                                    
        parnam ( 4) = 'tau     '  ! timescale                                                                       
        parnam ( 5) = 'lz      '  ! total length        
        parnam ( 6) = 'ampdebye'  ! prefactor                                                                       
        parnam ( 7) = 'wl4     '  ! rouse rate                                                                      
        parnam ( 8) = 'n_segmen'  ! effective N for summation                                                       
        parnam ( 9) = 're      '  ! end-to-end radius of Gaussian coil                                              
        parnam (10) = 'temp    '  ! temperature if not in parameters                                                
        parnam (11) = 'com_diff'  ! center of mass diffusion (if 0, use Rouse default)                              
        parnam (12) = 'pmin    '  ! minimum mode to be included                                                     
        parnam (13) = 'pmax    '  ! maximum mode to be included                                                                    
! >>>>> describe parameters >>>>>>> 
        th_param_desc( 1,idesc) = "prefactor" !//cr//parspace//&
        th_param_desc( 2,idesc) = "fluctuation intensity (relative)" !//cr//parspace//&
        th_param_desc( 3,idesc) = "length scale" !//cr//parspace//&
        th_param_desc( 4,idesc) = "timescale" !//cr//parspace//&
        th_param_desc( 5,idesc) = "total length" !//cr//parspace//&
        th_param_desc( 6,idesc) = "debye prefactor" !//cr//parspace//&
        th_param_desc( 7,idesc) = "rouse rate" !//cr//parspace//&
        th_param_desc( 8,idesc) = "effective N for summation" !//cr//parspace//&
        th_param_desc( 9,idesc) = "end-to-end radius of Gaussian coil" !//cr//parspace//&
        th_param_desc(10,idesc) = "temperature if not in parameters" !//cr//parspace//&
        th_param_desc(11,idesc) = "center of mass diffusion (if 0, use Rouse default)" !//cr//parspace//&
        th_param_desc(12,idesc) = "minimum mode to be included" !//cr//parspace//&
        th_param_desc(13,idesc) = "maximum mode to be included" !//cr//parspace//&
! >>>>> describe record parameters used >>>>>>>
 ! >>>>> describe record parameters used >>>>>>>
        th_file_param(:,idesc) = " " 
        th_file_param(  1,idesc) = "q        > q-value"
! >>>>> describe record parameters creaqted by this theory >>>>>>> 
        th_out_param(:,idesc)   = " "
        th_out_param(1,idesc)   = "a2sqt = a**2/sqrt(tau) "
!
                                             
! >>>>> describe parameters >>>>>>> 
        th_file_param(:,idesc) = " " 
        th_file_param(  1,idesc) = "q        > momentum transfer"
        th_file_param(  2,idesc) = "temp     > temperature"
! >>>>> describe record parameters creaqted by this theory >>>>>>> 
        th_out_param(:,idesc)  = " "
        th_out_param(  1,idesc) = "diff     > diffusion in cm**2/s"
        th_out_param(  2,idesc) = "l        > effective segment length"
        th_out_param(  3,idesc) = "w        > rouse rate: W"
        th_out_param(  4,idesc) = "wl4      > inferred value of Wl4"
!


 
        th_locrepdp = 0.0
 
        RETURN
     ENDIF
!
! ---- transfer parameters -----
      ampli    =      pa( 1)
      b        =   abs( pa( 2) )
      a        =   abs( pa( 3) )
      tau      =   abs( pa( 4) )
      lz       =   abs( pa( 5) )
      ampdebye =   abs( pa( 6) )
      wl4      =   abs( pa( 7))
      n_segmen =  nint( pa( 8))
      re       =   abs( pa( 9))
      temp     =        pa(10)
      com_diff =   abs( pa(11))
      pmin     =        pa(12)
      pmax     =        pa(13)

! ---- extract parameters that are contained in the present record under consideration by fit or thc ---
      iadda = actual_record_address()
! >>> extract: q-value
      xh =     0.1d0
      call parget('q       ',xh,iadda,ier)
      q        = xh

      xh =     400d0
      call parget('temp    ',xh,iadda,ier)
      temp     = xh



      t        = x
! 
! ------------------------------------------------------------------
! ----------------------- implementation ---------------------------
! ------------------------------------------------------------------
! 
     sqt0 =  local_reptationB( q*a, teps,  b, lz)
     sqt  =  local_reptationB( q*a, t/tau, b, lz)

     Dr  = com_diff * 1d-9 / 1d-16  ! in A**2/ns
     call NrouseP(q,t,temp,Dr,wl4,n_segmen,Re, W, l,pmin,pmax, Sqdeb0,Sqdebt)
     Sqdeb0 = ampdebye * Sqdeb0 
     Sqdebt = ampdebye * Sqdebt 

     th_locrepdp = ampli * ( sqt + Sqdebt)/(sqt0 +Sqdeb0)

!     write(6,*) t, q, sqt, sqt0
      call parset("a2sqt   ", sngl(a*a/sqrt(tau)),iadda,ier)
! ---- writing computed parameters to the record >>>
      call        parset('l       ',sngl(l),iadda,ier)      ! in ns A units
      call        parset('w       ',sngl(W),iadda,ier)      !     "
      call        parset('wl4     ',sngl(W*l**4),iadda,ier) !     "
  
      Dr        = Dr /( 1d-9 / 1d-16 ) ! in cm**2/s
      call parset('diff    ',sngl(Dr),iadda,ier)
 

                   


CONTAINS


! subroutines and functions entered here are private to this theory and share its variables 
 
  function local_reptationB(q, t, B, L) result(val)
    implicit none
    double precision, intent(in)   :: q, t, B, L
    double precision, parameter    :: A = 0d0
    double precision               :: val
    double precision, parameter    :: sqp = sqrt(4*atan(1d0))

    double precision               :: ec1, ec2, dec

    ec1 = erfc((q ** 2 * t + 0.3D1 * L) * t ** (-0.1D1 / 0.2D1) / 0.6D1)
    ec2 = erfc(sqrt(t) * q ** 2 / 0.6D1)

    if( isnan(ec1) ) ec1 = 1d0 - erf((q ** 2 * t + 0.3D1 * L) * t ** (-0.1D1 / 0.2D1) / 0.6D1)
    if( isnan(ec2) ) ec2 = 1d0 - erf(sqrt(t) * q ** 2 / 0.6D1)

    dec =   (-ec1 + ec2 )

    if( isnan(dec) ) dec = 0

      val= 0.72D2 * (sqrt(t) * q ** 4 * &
           exp((-0.2D1 * L * q ** 2 * t - 0.3D1 * L ** 2) &
           / t / 0.12D2) / 0.36D2 + sqrt(0.3141592653589793D1) &
           * (q ** 2 * t / 0.3D1 + L) * q ** 4 * &
           exp(t * q ** 4 / 0.36D2) * &
          ( dec ) / 0.72D2 - sqrt(t) * q ** 4 / 0.36D2) &
           * B / q ** 4 * 0.3141592653589793D1 ** (-0.1D1 / 0.2D1) / L + &
           0.72D2 * (A * &
           exp(-q ** 2 * L / 0.6D1)  &
         * sqrt(0.3141592653589793D1) &
         + (A * L * q ** 2 / 0.6D1 - A) * sqrt(0.3141592653589793D1)) * &
         0.3141592653589793D1 ** (-0.1D1 / 0.2D1) / q ** 4 / L

  end function local_reptationB




!?!        subroutine NrouseP(q,t,temp,Dr,wl4,N,R, W, l,pmin,pmax, Sq,Sqt)
!?! !      ========================================================
!?! !
!?! ! Rouse expression for a chain of finite length:
!?! ! Input parameters:
!?! !    q     ----> momentum transfer in A**-1
!?! !    t     ----> time in nano-sec
!?! !    temp  ----> temperature in K
!?! !    Dr    ----> center of mass diffusion constant in A**2/ns, if 0 <-- Rouse-expectation
!?! !    wl4   ----> friction coefficient in A**4/ns
!?! !    N     ----> number of chain segments
!?! !    R     ----> end-to-end distance of the polymer molecule
!?! !    pmin  ----> minimum p
!?! !    pmax  ----> maximum p
!?! ! Output parameters:
!?! !    W     <--- "Rouse factor" 3kT/(xi*l**2); R**2=N*l**2
!?! !    l     <--- "Segment length l"
!?! !    Sq    <--- S(Q)
!?! !    Sqt   <--- S(Q,t)
!?! ! ------------------------------------------------------------
!?! !
!?!        implicit none
!?! 
!?!        double precision kb, pi
!?!        parameter(kb=1.380662d-23)
!?!        parameter(pi=3.141592654d0)
!?! 
!?!        double precision q,t,temp,Dr,xi,R, W,Sq,Sqt, wl4, pmin, pmax
!?!        integer N, nn,mm,ifix,ip
!?! 
!?!        double precision l, tau_p, kbt, Sq0, arg1, arg2
!?!        double precision a0,e0, ff2, ffc,    arg10,arg20
!?!        double precision aa1 , aa2
!?!        double precision p, p0fix, pfac
!?! 
!?!        double precision :: cosarray(N,N), ewfac(N)
!?! 
!?!        integer :: ipmin, ipmax, i
!?! 
!?! !       integer iout
!?!        
!?!        if(N.le.0) then
!?!          W  = 999
!?!          Sq = 999
!?!          Sqt= 999
!?!          write(6,*)'Error Number of chain segments is <= 0!',N
!?!          return
!?!        endif
!?! 
!?! ! ---- determine the segment length l ----
!?!        l = sqrt(R**2/N)       
!?!        
!?! ! ---- and the Rousefactor ----
!?!        kbt = temp*kb            ! in Joule = kg*m**2/s**2
!?!        kbt = kbt * 100          ! in         kg*A**2/ns**2
!?!        xi  = 3*kbt*l**2 / wl4
!?!        W   = 3*kbt/(xi*(l**2))  ! in 1/ns
!?! 
!?! 
!?! ! ---- set the diffusion constant if input is zero --- !
!?!        if(Dr.eq.0.0d0) then
!?!          Dr = kbt/(N*xi)
!?!        endif
!?! 
!?! !$OMP PARALLEL DO     
!?!        do nn=1,N
!?!         do ip=1,N
!?!          cosarray(nn,ip) = cos((pi*ip*nn)/dfloat(N)) / ip 
!?!         enddo
!?!        enddo
!?! !$OMP END PARALLEL DO   
!?! 
!?! !$OMP PARALLEL DO    
!?!        do i=1,N
!?!          ewfac(i) = (1d0-exp(-2*W*(1-cos((pi*i)/dfloat(N)))*t)) 
!?!        enddo
!?! !$OMP END PARALLEL DO    
!?! 
!?!        ipmin = max(1,nint(pmin))
!?!        ipmax = min(N,nint(pmax))
!?! 
!?! ! ---- init sums ----
!?!        Sq0 = 0
!?!        Sq  = 0
!?!        Sqt = 0
!?!        ff2  = -2*N*(l*q)**2/(3*pi**2)
!?! 
!?! ! ---- Do the sums -----
!?! 
!?! !$OMP PARALLEL DO REDUCTION(+:Sq,Sqt)
!?!        do nn = 1,N
!?!         do mm = 1,N
!?! 
!?!           Sq  = Sq  + exp(-(q**2)*(       abs(nn-mm)*(l**2)/6.0d0))
!?!           Sqt = Sqt + exp(-(q**2)*(Dr*t + abs(nn-mm)*(l**2)/6.0d0) + &
!?!                 ff2* sum(cosarray(nn,ipmin:ipmax) * cosarray(mm,ipmin:ipmax) *  ewfac(ipmin:ipmax) ))
!?! 
!?!         enddo
!?!        enddo
!?! !$OMP END PARALLEL DO
!?! 
!?!        Sq  = Sq /N
!?!        Sqt = Sqt/N
!?! 
!?! !!       write(6,'(1x,a,6E14.6)')'q,t,Sq,Sqt, Sqt/Sq, w=', q,t,Sq,Sqt, Sqt/Sq, w 
!?! 
!?!        return
!?!        end  subroutine NrouseP
!?! 



       subroutine NrouseP(q,t,temp,Dr,wl4,N,R, W, l,pmin,pmax, Sq,Sqt)
!      ========================================================
!
! Rouse expression for a chain of finite length:
! Input parameters:
!    q     ----> momentum transfer in A**-1
!    t     ----> time in nano-sec
!    temp  ----> temperature in K
!    Dr    ----> center of mass diffusion constant in A**2/ns, if 0 <-- Rouse-expectation
!    wl4   ----> friction coefficient in A**4/ns
!    N     ----> number of chain segments
!    R     ----> end-to-end distance of the polymer molecule
!    pmin  ----> minimum p
!    pmax  ----> maximum p
! Output parameters:
!    W     <--- "Rouse factor" 3kT/(xi*l**2); R**2=N*l**2
!    l     <--- "Segment length l"
!    Sq    <--- S(Q)
!    Sqt   <--- S(Q,t)
! ------------------------------------------------------------
!
       implicit none

       double precision kb, pi
       parameter(kb=1.380662d-23)
       parameter(pi=3.141592654d0)

       double precision q,t,temp,Dr,xi,R, W,Sq,Sqt, wl4, pmin, pmax
       integer N, nn,mm,ifix,ip

       double precision l, tau_p, kbt, Sq0, arg1, arg2
       double precision a0,e0, ff2, ffc,    arg10,arg20
       double precision aa1 , aa2
       double precision p, p0fix, pfac

       double precision :: cosarray(N,N), ewfac(N)

       integer :: ipmin, ipmax, i

!       integer iout
       
       if(N.le.0) then
         W  = 999
         Sq = 999
         Sqt= 999
         write(6,*)'Error Number of chain segments is <= 0!',N
         return
       endif

! ---- determine the segment length l ----
       l = sqrt(R**2/N)       
       
! ---- and the Rousefactor ----
       kbt = temp*kb            ! in Joule = kg*m**2/s**2
       kbt = kbt * 100          ! in         kg*A**2/ns**2
       xi  = 3*kbt*l**2 / wl4
       W   = 3*kbt/(xi*(l**2))  ! in 1/ns


! ---- set the diffusion constant if input is zero --- !
       if(Dr.eq.0.0d0) then
         Dr = kbt/(N*xi)
       endif

!$OMP PARALLEL DO     
       do nn=1,N
        do ip=1,N
         cosarray(nn,ip) = cos((pi*ip*nn)/dfloat(N)) / ip 
        enddo
       enddo
!$OMP END PARALLEL DO   

!$OMP PARALLEL DO    
       do i=1,N
         ewfac(i) = (1d0-exp(-2*W*(1-cos((pi*i)/dfloat(N)))*t)) &
         * (((erf(-pmin+i)-1d0)/2+1) * ((erf(pmax-i)-1d0)/2+1)) 
       enddo
!$OMP END PARALLEL DO    

       ipmin = max(1,nint(pmin)-4)
       ipmax = min(N,nint(pmax)+4)

!       ipmin = 1
!       ipmax = N



! ---- init sums ----
       Sq0 = 0
       Sq  = 0
       Sqt = 0
       ff2  = -2*N*(l*q)**2/(3*pi**2)

! ---- Do the sums -----

!$OMP PARALLEL DO REDUCTION(+:Sq,Sqt)
       do nn = 1,N
        do mm = 1,N

          Sq  = Sq  + exp(-(q**2)*(       abs(nn-mm)*(l**2)/6.0d0))
          Sqt = Sqt + exp(-(q**2)*(Dr*t + abs(nn-mm)*(l**2)/6.0d0) + &
                ff2* sum(cosarray(nn,ipmin:ipmax) * cosarray(mm,ipmin:ipmax) *  ewfac(ipmin:ipmax) ))

        enddo
       enddo
!$OMP END PARALLEL DO

       Sq  = Sq /N
       Sqt = Sqt/N

!!       write(6,'(1x,a,6E14.6)')'q,t,Sq,Sqt, Sqt/Sq, w=', q,t,Sq,Sqt, Sqt/Sq, w 

       return
       end  subroutine NrouseP




 end function th_locrepdp

 
