 FUNCTION th_nnvilgis(x, pa, thnam, parnam, npar,ini, nopar ,params,napar,mbuf)
!================================================================================
!  Scattering factor of a Rouse  chain in a harmonic potential. Using direct summation over an effective number of beads, however, using the infinite chain rms distance form Eq(24) of the publication.
!  T.A. Vilgis and F. Boue, Journal of Polymer Science Part B Polymer Physics 26, 2291-2301 (1988)
      use theory_description 
      implicit none 
      real    :: th_nnvilgis
      character(len=8) :: thnam, parnam (*) 
      real    :: pa (*) 
      real    :: x , xh
      integer :: mbuf, nparx, ier, ini, npar, iadda
      integer, intent(inout) :: nopar       
      character(len=80), intent(inout) :: napar(mbuf) 
      real, intent(inout) :: params(mbuf) 
     
      double precision, parameter :: Pi = 4*atan(1d0)
      integer                     :: actual_record_address
     
! the internal parameter representation 
     double precision :: ampli      ! prefactor                                                                       
     double precision :: n          ! number of segments (do not fit, its integer)                                    
     double precision :: re         ! effective segment length via Gaussian end-to-end re
     double precision :: wl4        ! Rouse rate                                                                      
     double precision :: rmesh      ! effective potential parameter in terms mesh size, see paper                     
     double precision :: com        ! with (1) or without (0) com diffusion                                
! the recin parameter representation 
     double precision :: q          ! q-value    default value                                                        
! the reout parameter representation 
     double precision :: rg         ! radius of gyration                                                              
 
     double precision :: th
 
     double precision :: q0, l, Sq, Sqt, Sqint, Sqtint, t
     integer          :: ni
!
! ----- initialisation ----- 
    IF (ini.eq.0) then     
       thnam = 'nnvilgis'
       nparx =        6
       IF (npar.lt.nparx) then
           WRITE (6,*)' theory: ',thnam,' no of parametrs=',nparx,' exceeds current max. = ',npar
          th_nnvilgis = 0
          RETURN
       ENDIF
       npar = nparx
! >>>>> describe theory with >>>>>>> 
       idesc = next_th_desc()
       th_identifier(idesc)   = thnam
       th_explanation(idesc)  = " Scattering factor of a Rouse  chain in a harmonic potential. Using direct summation over an effective number of beads, however, using the infinite chain rms distance form Eq(24) of the publication."
       th_citation(idesc)     = " T.A. Vilgis and F. Boue, Journal of Polymer Science Part B Polymer Physics 26, 2291-2301 (1988)"
!       --------------> set the parameter names --->
        parnam ( 1) = 'ampli   '  ! prefactor                                                                       
        parnam ( 2) = 'n       '  ! number of segments (do not fit, its integer)                                    
        parnam ( 3) = 're      '  ! effective segment length Re = l * N**nu /sqrt(6)                                
        parnam ( 4) = 'wl4     '  ! Rouse rate                                                                      
        parnam ( 5) = 'rmesh   '  ! effective potential parameter in terms mesh size, see paper                     
        parnam ( 6) = 'com     '  ! with (1) or without (0) com diffusion                                   
! >>>>> describe parameters >>>>>>> 
        th_param_desc( 1,idesc) = "prefactor" !//cr//parspace//&
        th_param_desc( 2,idesc) = "number of segments (do not fit, its integer)" !//cr//parspace//&
        th_param_desc( 3,idesc) = "effective segment length Rg = l * N**nu /sqrt(6)" !//cr//parspace//&
        th_param_desc( 4,idesc) = "Rouse rate" !//cr//parspace//&
        th_param_desc( 5,idesc) = "effective potential parameter in terms mesh size, see paper" !//cr//parspace//&
        th_param_desc( 6,idesc) = "lifetime of the rmesh constraint (experimental)" !//cr//parspace//&
! >>>>> describe record parameters used >>>>>>>
        th_file_param(:,idesc) = " " 
        th_file_param(  1,idesc) = "q        > q-value    default value"
! >>>>> describe record parameters creaqted by this theory >>>>>>> 
        th_out_param(:,idesc)  = " "
        th_out_param(  1,idesc) = "rg       > radius of gyration"
! 
        th_nnvilgis = 0.0
 
        RETURN
     ENDIF
!
! ---- transfer parameters -----
      ampli    =      pa( 1)
      n        = ABS( pa( 2) )
      re       = ABS( pa( 3) )
      wl4      = ABS( pa( 4) )
      rmesh    = ABS( pa( 5) )
      com      =    ( pa( 6) )
! ---- extract parameters that are contained in the present record under consideration by fit or thc ---
      iadda = actual_record_address()
! >>> extract: q-value    default value
      xh =      0
      call parget('q       ',xh,iadda,ier)
      q        = xh
! 
! ------------------------------------------------------------------
! ----------------------- implementation ---------------------------
! ------------------------------------------------------------------
! 
     t   = x
     ni  = nint(n)
     l   = re/sqrt(n)
     rg  =  l * dble(ni) / sqrt(6d0)
     q0  = (1d0/rmesh**2) * (l**2) / 3d0
!     call  NrouseV(q,t,wl4,l,q0,ni, Sq,Sqt)
     call  NNvilgis(q,0d0,wl4,l,rmesh,ni,sq, sqint)
     call  NNvilgis(q,t  ,wl4,l,rmesh,ni,sqt, sqtint)

     if(nint(com) == 0) then
        th  = ampli * Sqtint/Sqint     
     else
        th  = ampli * Sqt/Sq     
     endif


     th_nnvilgis = th
 
! ---- writing computed parameters to the record >>>  
      call parset('rg      ',sngl(rg),iadda,ier)
      call parset('l       ',sngl(l),iadda,ier)
 
 CONTAINS 
 
! subroutines and functions entered here are private to this theory and share its variables 
 
 subroutine NNvilgis(q,t,wl4,l,rmesh,N,sqt, sqtint)
!==================================================
!
! Implementation of Eq. 30 of 
! [Vilgis and Boue, J. Polymer Science Part B: Polymer Physics, Vol 26, 2291-2301 (1988)]
! the Fourier integral can be done analytically an yields terms as b*exp(-a*t/(p**2+p0**2)/(p**2+p0**2)
! the p-sum is then done explicitly (efficiency increse by observing that all factors can be written as cos*
! NOTE: there are several typos in the formulae of the paper !! 
! 
  implicit none

  double precision, intent(in)  :: q        ! momentum transfer
  double precision, intent(in)  :: t        ! time
  double precision, intent(in)  :: wl4      ! rouse rate
  double precision, intent(in)  :: l        ! segment length
  double precision, intent(in)  :: rmesh    ! "confinement" length due to the harmonic potential
  integer         , intent(in)  :: N        ! number of segments (summation)
  double precision, intent(out) :: sqt      ! the sqt-value
  double precision, intent(out), optional :: sqtint      ! the sqt-value internal modes only


  double precision, parameter :: Pi = 4d0*atan(1d0)

  double precision :: coser(1:N,1:N)
  double precision :: eser(1:N)
  double precision :: rrarr(N,N)  ! just for checking can be removed later

  double precision :: p0, q0, W, pidn, rr, tt

  integer          :: nn, mm, p


  W    = wl4/l**4
  pidn = Pi / N
  q0   = 1d0/rmesh**2
  p0   = q0 * N / Pi
!$OMP PARALLEL DO 
  do p=1,N
    do nn=1,N
      coser(nn,p) = cos(Pi*p*nn/dfloat(N))  / sqrt((p**2 + p0**2))
    enddo
  enddo
!$OMP END PARALLEL DO 

!$OMP PARALLEL DO 
  do p=1,N
      eser(p) = exp(-(Pi**2/N**2)*W*(p**2 + p0**2)*t)
! write(*,*)"eser:",p,t,W,(Pi**2/N**2)*W*(p**2 + p0**2),eser(p) 
  enddo
!$OMP END PARALLEL DO 

  sqt = 0
!$OMP PARALLEL DO PRIVATE(rr) REDUCTION(+:sqt)
  do nn=1,N
    do mm=1,N
      rr = 0
!$OMP PARALLEL DO REDUCTION(+:rr)
      do p=1,N
        rr = rr + coser(nn,p)**2 + coser(mm,p)**2 - 2*coser(nn,p)*coser(mm,p) * eser(p)
!        rr = rr + cos(Pi*p*nn/dfloat(N))**2/p**2 + cos(Pi*p*mm/dfloat(N))**2/p**2 - &
!                2*cos(Pi*p*nn/dfloat(N))*cos(Pi*p*mm/dfloat(N))/p**2
      enddo
!$OMP END PARALLEL DO 
      rr  = rr * 4*N / (2*Pi)  /Pi 
!                              === dieser Faktor is noetig damit rr(n,m,0)=abs(n-m) 
!                              === fehlt im Paper ?!
!write(*,*)nn,mm,rr
      sqt = sqt + exp(-(q*l)**2/6d0 * rr)
      rrarr(mm,nn) = rr
    enddo
  enddo
!$OMP END PARALLEL DO 
  sqt = sqt / (N*N) 
  if(present(sqtint)) sqtint = sqt
 
! Diffusion
  if(abs(W*q0*t) > 1d-6) then
     rr     = 2*l**2/N/q0*(1-exp(-W*q0*t))  ! a factor of 2 different from Vilgis ...
  else
     rr     = 2*l**2*W*t/N-l**2*W**2*t**2*q0/N
  endif

  sqt    = sqt*exp(-(q)**2/6d0 * rr)

end subroutine NNvilgis



 end function th_nnvilgis
