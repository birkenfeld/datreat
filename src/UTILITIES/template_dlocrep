#THEORY dlocrep
        discrete local reptation Ansatz
#CITE
        ??
#PARAMETERS
        ampli            ! prefactor 
        z                ! number of entanglement blobs, integer: do not fit
        ne               ! entanglement N, integer: do not fit
        l                ! segment length
        b                ! b-factor local reptation
        w                ! rouse rate
        fw1              ! modification factor w-locrecp
        fw2              ! modification factor Rouse blob
        fa               ! modification factor step length
#RECIN-PARAMETERS    (allow 8 chars for name, start only beyond 8 with default)
        q            0.1 ! q-value   
#RECOUT-PARAMETERS
        rg               ! radius of gyration
#VARIABLES
   double precision :: t
   double precision :: sqtloc, sqtloc0, sqtrous, sqtrous0
   integer          :: nz, nr 
#IMPLEMENTATION
     t   = x
     nz  = nint(z)
     nr  = nint(ne)
     call NrousePb(q,t, nr, W*fw2, l,1,nr, sqtrous0,sqtrous)
     call Nlocrep (q,t, nz, W*fw1, l, B,   Sqtloc0,  Sqtloc)
     rg  = 0    ! to de done

     th  = ampli * sqtrous*Sqtloc/(sqtrous0*sqtloc0)


#SUBROUTINES
 

       subroutine NrousePb(q,t, N, W, l,pmin,pmax, Sq,Sqt)
!      ==================================================
!
! Rouse expression for a chain of finite length (without com diffusion):
!
       implicit none
       double precision, intent(in) :: q              ! momentum transfer
       double precision, intent(in) :: t              ! time
       integer         , intent(in) :: n              ! number of segments
       double precision, intent(in) :: w              ! Rouse rate
       double precision, intent(in) :: l              ! segment length
       integer         , intent(in) :: pmin           ! lowest mode nr
       integer         , intent(in) :: pmax           ! highest mode nr
       double precision, intent(out):: Sq             ! Sq(t=0)
       double precision, intent(out):: Sqt            ! Sq(t)




       double precision kb, pi
       parameter(pi=3.141592654d0)

       integer          :: nn,mm,ip

       double precision :: tau_p,  Sq0, arg1, arg2
       double precision :: a0,e0, ff2, ffc,    arg10,arg20
       double precision :: aa1 , aa2
       double precision :: p, p0fix, pfac

       double precision :: cosarray(N,N), ewfac(N)

       integer :: ipmin, ipmax, i
      
       if(N.le.0) then
         W  = 999
         Sq = 999
         Sqt= 999
         write(6,*)'Error Number of chain segments is <= 0!',N
         return
       endif


!$OMP PARALLEL DO     
       do nn=1,N
        do ip=1,N
         cosarray(nn,ip) = cos((pi*ip*nn)/dfloat(N)) / ip 
        enddo
       enddo
!$OMP END PARALLEL DO   

!$OMP PARALLEL DO    
       do i=1,N
         ewfac(i) = (1d0-exp(-2*W*(1-cos((pi*i)/dfloat(N)))*t)) 
       enddo
!$OMP END PARALLEL DO    

       ipmin = max(1,nint(pmin))
       ipmax = min(N,nint(pmax))

! ---- init sums ----
       Sq0 = 0
       Sq  = 0
       Sqt = 0
       ff2  = -2*N*(l*q)**2/(3*pi**2)

! ---- Do the sums -----

!$OMP PARALLEL DO REDUCTION(+:Sq,Sqt)
       do nn = 1,N
        do mm = 1,N

          Sq  = Sq  + exp(-(q**2)*(       abs(nn-mm)*(l**2)/6.0d0))
          Sqt = Sqt + exp(-(q**2)*(Dr*t + abs(nn-mm)*(l**2)/6.0d0) + &
                ff2* sum(cosarray(nn,ipmin:ipmax) * cosarray(mm,ipmin:ipmax) *  ewfac(ipmin:ipmax) ))

        enddo
       enddo
!$OMP END PARALLEL DO

       Sq  = Sq /N
       Sqt = Sqt/N

       end subroutine NrousePb
 

 

       subroutine Nlocrep(q,t, N, W, l, B, Sq,Sqt)
!      ===============================================
!
! Local repatation as finite sum
!
       implicit none
       double precision, intent(in) :: q              ! momentum transfer
       double precision, intent(in) :: t              ! time
       integer         , intent(in) :: n              ! number of segments (=Z=steps)
!       integer         , intent(in) :: ne             ! number of segments (ne)
       double precision, intent(in) :: w              ! Rouse rate
       double precision, intent(in) :: l              ! segment length
       double precision, intent(in) :: B              ! b-factor
       double precision, intent(out):: Sq             ! Sq(t=0)
       double precision, intent(out):: Sqt            ! Sq(t)




       double precision kb, pi
       parameter(pi=3.141592654d0)

       integer          ::  nn,mm

       double precision :: tau_p,  Sq0, arg1, arg2
       double precision :: a0,e0, ff2, ffc,    arg10,arg20
       double precision :: aa1 , aa2
       double precision :: p, p0fix, pfac  

       double precision :: aq, sig, s1, s2



       double precision            :: distar(0:N), distar0(0:N), ss
       double precision, parameter :: Delta = 0.5d0

       integer :: ipmin, ipmax, i


       aq  = ne*l * q*q
       sig = 4*w*l**2

       distar(0)  =  2*Delta + B*erf(Delta/(2*l*sqrt(Pi*W)*sqrt(t)))
       distar0(0) =  2*Delta + B
       
!$OMP PARALLEL DO PRIVATE(ss)  
       do nn=1,N
         ss = l*nn
!        distar(nn)  = (1d0 + B*exp(-ss**2/(sig*t))/(sqrt(Pi*sig*t))) * exp(-aq*ss/l)
         distar(nn)  = (2*Delta+(1d0/2)*B*erf((Delta+nn)/(2*sqrt(W)*l*sqrt(t))) &
                              +(1/2d0)*B*erf((Delta-nn)/(2*sqrt(W)*l*sqrt(t)))) * exp(-aq*ss/l)

         distar0(nn) = exp(-aq*ss/l)
  


!! Alternate full integral (numerically problematic erf diff at large aq, get fix.. !
!!        distar(nn)=exp(-2*aq*nn)*(B*exp(aq*(W*aq*t+2*nn))*erf((-2*W*aq*t+Delta-nn)*W**(-1d0/2)*t**(-1d0/2)/2)*aq+ &
!!                                  B*erf((2*W*aq*t+Delta+nn)*W**(-1d0/2)*t**(-1d0/2)/2)*exp(aq*(W*aq*t+2*nn))*aq+  &
!!                                  2*l*(exp(aq*(Delta+nn))-exp(aq*(-Delta+nn))))/aq/l/2



       enddo
!$OMP END PARALLEL DO   

! ---- init sums ----
       Sq0 = 0
       Sq  = 0
       Sqt = 0
! ---- Do the sums -----

!$OMP PARALLEL DO REDUCTION(+:Sq,Sqt)
       do nn = 1,N
        do mm = 1,N
          Sq   = Sq   + distar(abs(nn-mm))
          Sq0  = Sq0  + distar0(abs(nn-mm))
        enddo
       enddo
!$OMP END PARALLEL DO

       Sq  = Sq /N
       Sqt = Sqt/N

       end subroutine Nlocrep
 


#END

