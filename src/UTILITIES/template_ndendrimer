#THEORY ndendri
        dendrimer random chain structure factor P(Q) (P(Q==)=1) by direct summation over N segments                
        chain statistics is expressed ny nu (nu=0.5 ==> Gaussian chain)
        in addition a chi parameter my be set:
        S(Q) = 1/(1/(N*P(Q) + 2*chi)
#CITE
        mm
#PARAMETERS
        ampli            ! prefactor 
        n                ! number of segments per subbranch (do not fit, its integer)
        gen              ! number of dendrimewr generations
        branch           ! number of branching
        l                ! effective segment length Rg = l * N**nu /sqrt(6)
        nu               ! expansion parameter (Gaussian random walk =0.5)
        chi              ! chi parameter
        withsq           ! if ==1,  multiply with sq_molecule_dendrimer
#RECIN-PARAMETERS    (allow 8 chars for name, start only beyond 8 with default)
  
#RECOUT-PARAMETERS
        rg               ! radius of gyration
#VARIABLES
   double precision :: pq, rg, sq
   integer          :: ni
#IMPLEMENTATION
     q   = x
     rq  = 0  ! NOCH BERECHNEN !!
     pq  = dendrimer_sq(q,l,nu, nint(gen), nint(branch), nint(n))
     sq  = 1d0 / ( 1d0/(ni*pq) + 2d0 * chi )
     th  = ampli * sq
     if(nint(withsq) == 1) then
        th = th * sq_molecule_dendrimer(q)
     endif



#SUBROUTINES

function dendrimer_sq(q,l,nue,generations,multiplicity,branchlength) result(sq)

    implicit none
    double precision, intent(in)       :: l   
    double precision, intent(in)       :: q   
    double precision, intent(in)       :: nue 
    integer         , intent(in)       :: generations  
    integer         , intent(in)       :: multiplicity 
    integer         , intent(in)       :: branchlength 
    double precision                   :: sq 

    integer, save                      :: segments, nodes
    integer                            :: i, g, iroot
    integer                            :: inode, inode2
    integer                            :: ip1, g1, g2
    integer                            :: N, s1, s2, n1, n2
        
    integer, save                      :: ipar(3) = 0

    integer, allocatable,    save      :: root(:), gen(:), path(:,:)
    integer, allocatable,    save      :: gdistance(:,:)
    integer, allocatable,    save      :: sdistance(:,:)
    double precision, allocatable      :: eterms(:)

    integer                            :: maxdist
    character(len=80)                  :: fmt
    
    
    double precision                   :: ql2, mu
    
    nodes    = (multiplicity**(generations+1) - multiplicity)/(multiplicity-1)
    segments = nodes * branchlength

!    
! DETERMINE TOPOLOGICAL DISTANCE MATRIX
! once for a given topolgy as defined by: generations, multiplicity, branchlength
! 
! first the distance beween nodes (implict center = node 0, not expilict in lists)
! --> gdistances
!
! the consider single segment distances, start od segment counting at node towards
! inner part till the previous generation node
! --> sdistanceds
!
   
ii:    if(maxval(abs(ipar-[generations,multiplicity,branchlength]))>0) then

    write(*,*)"Reestablish distance matrix.."
 
    if(allocated(root))      deallocate(root)
    if(allocated(gen))       deallocate(gen)
    if(allocated(path))      deallocate(path)
    if(allocated(gdistance)) deallocate(gdistance)
    if(allocated(sdistance)) deallocate(sdistance)
    allocate(root(nodes+1))
    allocate(gen (nodes+1))
    allocate(path(nodes,0:generations))
    allocate(gdistance(nodes,nodes))
    allocate(sdistance(segments,segments))
    
    path      = 0
    gdistance = 0
    iroot     = 0
    
    
    do inode=1, nodes
      root(inode) = iroot
      if(mod(inode,multiplicity) == 0) iroot = iroot + 1
    !  write(*,*) inode, root(inode)
    enddo 
    
    
    ! det generation
    do inode=1,nodes
         g = 0
         iroot = inode
         path(inode,0) = iroot
    dl:  do g=0,generations
          iroot = root(iroot)
          path(inode,g+1) = iroot
          if(iroot == 0) exit dl      
         enddo dl
         gen(inode) = g
    !     write(*,*) inode, root(inode), gen(inode), 'P:', path(inode,:)
    enddo
   
    ! get connecting node
    do inode=1,nodes
      do inode2=1,nodes
    dg1:   do g1 = 0, gen(inode)
             ip1 = path(inode,g1)
             do g2 = 0, gen(inode2)
               if(ip1 == path(inode2,g2)) exit dg1
             enddo 
           enddo dg1    
     !      if(path(inode,g1) > 0) then
     !        write(*,*)"pair ",inode, inode2, gen(inode), gen(inode2)
     !        write(*,*) path(inode ,:)     
     !        write(*,*) path(inode2,:)  
     !        write(*,*) "g     : ", g1,g2
     !        write(*,*) "g-path: ", g1+g2
     !         write(*,*) "pair: ",inode, inode2,"   g-path: ", g1+g2
               gdistance(inode,inode2) = g1+g2
    !          if(g1>0 .and. g2>0) then
    !           write(*,*) "connect at:", path(inode,g1), path(inode2,g2)
    !         endif
    !       endif
      enddo 
    enddo
  
    
    !!
    if(nodes < 80) then
       write(*,*)"Topological distance between dendrimer nodes (center is 0)"
       
       write(*,'(4x    ,*(i3))')(inode,inode=1,nodes)
       write(*,'(3x,"|",*(a3))')("---",inode=1,nodes)
       do inode=1,nodes
        write(*,'(i3,"|",*(i3))') inode, gdistance(inode,:)
       !  write(fmt,'(a,i0,a)') '(i3,"|",',inode,'("..."),*(i3))'
       !  write(*,fmt) inode, gdistance(inode,inode+1:)
       enddo
    endif
    
    !!!!! now establis segment segment distances
 
!$OMP PARALLEL DO PRIVATE(inode,inode2,N,n1,n2,s1,s2)
   
    do inode2=1,nodes
      do inode=1,nodes
         N = gdistance(inode,inode2) * branchlength
         do n1 = 0, branchlength-1
           do n2 = 0, branchlength-1
             s1 = (inode -1)*branchlength + n1 + 1
             s2 = (inode2-1)*branchlength + n2 + 1
             if(N==0) then
                sdistance(s1,s2) = abs(n1 -n2)
             else
                sdistance(s1,s2) = abs(N-n1 -n2)
             endif
           enddo
         enddo
      enddo
    enddo
 !$OMP END PARALLEL DO 
   
    !!
    if(segments < 100) then
       write(*,*)"Topological distance between segments (center is 0)"
       
       write(*,'(4x    ,*(i3))')(s1,s1=1,segments)
       write(*,'(3x,"|",*(a3))')("---",s1=1,segments)
       do s1=1,segments
        write(*,'(i3,"|",*(i3))') s1, sdistance(s1,:)
       !  write(fmt,'(a,i0,a)') '(i3,"|",',inode,'("..."),*(i3))'
       !  write(*,fmt) inode, gdistance(inode,inode+1:)
       enddo

       write(*,*)"Topological symmetry check"
       
       write(*,'(4x    ,*(i3))')(s1,s1=1,segments)
       write(*,'(3x,"|",*(a3))')("---",s1=1,segments)
       do s1=1,segments
        write(*,'(i3,"|",*(i3))') s1, (sdistance(s1,:)-sdistance(:,s1))
       !  write(fmt,'(a,i0,a)') '(i3,"|",',inode,'("..."),*(i3))'
       !  write(*,fmt) inode, gdistance(inode,inode+1:)
       enddo   
    endif

    ipar = [generations,multiplicity,branchlength]
    
endif ii
    
    maxdist = branchlength*generations*2
    ! maxdist = maxval(sdistance)
    
    ! write(*,*)"Maxdist=",maxdist, branchlength*generations*2

!! DETERMINATION OF SQ
!! by summation of the Gaussian (possibly nu-modified) over all 
!! tpological distances (i.e. |n1-n2| in simple cases)

    
    if(allocated(eterms)) deallocate(eterms)
    allocate(eterms(0:maxdist))
    
    
      ql2 = (1d0/6d0) * (q*l)**2
      mu  = 2d0 * nue
    
!$OMP PARALLEL DO
       do i=0,maxdist
         eterms(i) = exp(-ql2*dble(i)**mu)
       enddo
!$OMP END PARALLEL DO
    
       sq = 0
!$OMP PARALLEL DO REDUCTION(+:sq)
       do s2=1,segments
        do s1=1,segments
          sq = sq + eterms(sdistance(s1,s2))
        enddo
       enddo
!$OMP END PARALLEL DO
    
      sq = sq/(segments**2)

end function dendrimer_sq

#END
