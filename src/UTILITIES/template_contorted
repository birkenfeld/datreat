#THEORY repmode
        Mode modified Rouse modified according to simulation analysis by Grest et al.
#CITE
        J.T. Kalathi, S.K. Kumar, M. Rubinstein and G.S. Grest; Macromolecules (2014) 47, 6925-6931
#PARAMETERS
        ampli            ! prefactor 
        wl4              ! reference scale for the Rouse rate       
        re               ! end-end radius of chains
        d                ! tube diameter (ree of subchain)
        n                ! effective number of segments in summation
        wscalinf         ! high mode limit factor for w
        wscal1           ! lowmode scale factor for w
        wnu              ! sharpness factor for transition function of W
        betainf          ! high mode limit for beta
        betamin          ! minimum value of beta
        sigmabet         ! width parameter for beta dip
        db2              ! parameter for the limit at low mode numbers
        ar               ! amplitude prefactor for mode amplitude expression (propto C-infinity)
        c                ! coefficient c in mode amplitude expression <x**2>=ar*(1-c/sqrt(N/p))/(4*sin(p*pi/2/N)**2)
#RECIN-PARAMETERS    (allow 8 chars for name, start only beyond 8 with default)
        q        0.1     ! q-value
#RECOUT-PARAMETERS
        l                ! effective segment length
        ne               ! number of segments of length l in entanglement
        w                ! basic rate
        w1               ! p=1 rate
        wn               ! p=n rate 
#VARIABLES
     double precision   :: t
#IMPLEMENTATION
     t   = x
#SUBROUTINES



       subroutine NrouseY(q,t,temp,Dr,wl4,N,R, W, l,ifix, Sq,Sqt)
!      ========================================================
!
! Rouse expression for a chain of finite length:
! Input parameters:
!    q     ----> momentum transfer in A**-1
!    t     ----> time in nano-sec
!    temp  ----> temperature in K
!    Dr    ----> center of mass diffusion constant in A**2/ns, if 0 <-- Rouse-expectation
!    wl4   ----> friction coefficient in A**4/ns
!    N     ----> number of chain segments
!    R     ----> end-to-end distance of the polymer molecule
!    ifix  ----> if 0: normal Rouse, else segment(N) fix
! Output parameters:
!    W     <--- "Rouse factor" 3kT/(xi*l**2); R**2=N*l**2
!    l     <--- "Segment length l"
!    Sq    <--- S(Q)
!    Sqt   <--- S(Q,t)
! ------------------------------------------------------------
!
       implicit none

       double precision kb, pi
       parameter(kb=1.380662d-23)
       parameter(pi=3.141592654d0)

       double precision q,t,temp,Dr,xi,R, W,Sq,Sqt, wl4
       integer N, nn,mm,ifix,ip

       double precision l, tau_p, kbt, Sq0, arg1, arg2
       double precision a0,e0, ff2, ffc,    arg10,arg20
       double precision aa1 , aa2
       double precision p, p0fix, pfac

       integer iout
       
       if(N.le.0) then
         W  = 999
         Sq = 999
         Sqt= 999
         write(6,*)'Error Number of chain segments is <= 0!',N
         return
       endif

! ---- determine the segment length l ----
       l = sqrt(R**2/N)       
       
! ---- and the Rousefactor ----
       kbt = temp*kb            ! in Joule = kg*m**2/s**2
       kbt = kbt * 100          ! in         kg*A**2/ns**2
       xi  = 3*kbt*l**2 / wl4
       W   = 3*kbt/(xi*(l**2))  ! in 1/ns

! ---- set the diffusion constant if input is zero --- !
       if(Dr.eq.0.0d0) then
         Dr = kbt/(N*xi)
       endif

    
       if(ifix.eq.0) then
         p0fix = 0
         pfac  = 1
       else
         p0fix = -0.5d0
         pfac  = 0.5d0   ! this is wrong ? !
         pfac=1         !! I think this has to be like this !!
       endif

! ---- init sums ----
       Sq0 = 0
       Sq  = 0
       Sqt = 0

! ---- Do the sums -----
       do nn = 1,N
        do mm = 1,N
          arg1 = -(q**2)*(Dr*t + abs(nn-mm)*(l**2)/6.0d0)
          arg10= -(q**2)*(       abs(nn-mm)*(l**2)/6.0d0)
          ff2  = -2*N*(l*q)**2/(3*pi**2)
    
          arg2 = 0
          arg20= 0
          do ip=1,N
            p = ip+p0fix
            tau_p = 2*W*(1-cos((pi*p)/dfloat(N)))
            a0    = -t*tau_p
            if(a0.lt.-200.0d0) a0 = -200.0d0
            e0    = 1.0d0-exp(a0)
            
            ffc   = cos((pi*p*nn)/dfloat(N)) * cos((pi*p*mm)/dfloat(N))
            ffc   = ffc / (p**2)
            ffc   = ffc*pfac

            arg2  = arg2  + ffc*e0
            arg20 = arg20 + ffc

          enddo   
          arg2  = arg2  * ff2
          arg20 = arg20 * ff2

          aa1 = arg10
          if(aa1.lt.-300.0d0) aa1 = -300.0d0
          if(aa1.gt. 300.0d0) aa1 =  300.0d0

          aa2 = arg1+arg2
          if(aa2.lt.-300.0d0) aa2 = -300.0d0
          if(aa2.gt. 300.0d0) aa2 =  300.0d0


          Sq  = Sq  + exp(aa1)
          Sqt = Sqt + exp(aa2)

        enddo
       enddo

       Sq  = Sq /N
       Sqt = Sqt/N

       if(iout().gt.1)write(6,'(1x,a,6E14.6)')
     *        'q,t,Sq,Sqt, Sqt/Sq, w=', q,t,Sq,Sqt, Sqt/Sq, w 

       return
       end

#END
