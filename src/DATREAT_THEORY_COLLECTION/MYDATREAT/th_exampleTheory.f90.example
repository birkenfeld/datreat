         function th000_000 (x,pa,thnam,parnam,npar,ini, nopar ,params,napar,mbuf) 
!     ========================================
!     name of this function in quotes  to call in datreat
!       
!     "dummy"
!     # description
!  	this is a dymmy function
!	#start description
!	Please give a description
! 	#end description
!
!	enforce of  explicit variable definition
       implicit none
       real*4 th000_000                   ! function return value real*4 for datreat

       character*8 thnam,parnam(20)       !      # theoriename and parameter names passed over (returned to datreat) in   parnam(i) and thname for ini=0
!      variables from datreat were all real*4
       real*4 pa(20)		!      # theorie parameter values in pa(i)    # definition real*4
       integer :: mbuf
		 integer, intent(inout) :: nopar                 ! Anzahl der Parameter data
       character*80, intent(inout) :: napar(mbuf)      ! name des parameters n
		 real, intent(inout) :: params(mbuf)             ! value des parameters n
		 real*4 x                	!      x value data
       real*4 q_dat		!      # needed parameter from data
       integer npar,ini,ier    ! number of datreat parameters, initialization flag  0 or !=0  , errorflag
!       locale variables  can be real*8   ;   by local_var=datreat_var  datreat real*4 is cast to local real*8
       real*8 T    ! local parameters
       real*8 tau
       real*8 q
       real*8 result                   ! result
       integer nparx                ! number of local parameters (excluding result)


!
! ----- initialisation ----- #Init from datreat called with ini=0 to tell datreat all about this function
       if(ini.eq.0) then
!	Theoriename
         thnam = 'dummy'
!	number of theorie parameter
	      nparx = 1
         if(npar.lt.nparx) then            ! check it and give a hint
           write(6,1)thnam,nparx,npar
1          format(' theory: ',a8,' no of parametrs=',i8,' exceeds current max. = ',i8)
           th000_000 = 0
           return
         endif
         npar = nparx
!        --------------> set the name of parameters
         parnam(1) = 'temperat'
!
!        default value for return
         th000_000 = 0
         return
       endif
!  ------------end initialization ---------------ier=0


!      put  values  to some significant variablenames to make it easier additional this casts datreat real*4 to local real*8
       tau      = x      !  x values
       T       = pa(1)  ! theory parameter names
!      to get the value of parameter eg 'q' from dataset
! 	returnvalue ier=0 if succeded, value from 'q' in real*4 from datreat  (min a space at end as end of string, max 8 char)
       call getpar('q ',q_dat,nopar ,params,napar,mbuf, ier) 
       q   = q_dat   !  if necessary  here cast to definition of of q eg real*8
!     default value or evaluation dependent on ier
       if(ier.ne.0) then
         q   = x
         tau = 0.0d0
       endif
! ---- calculate theory here -----


	! pass the result here at the end of calculation (cast to real*4)
	th000_000     =sngl(result)
!-------end of calculation value returned in th000_000                -------------

!!      to pass additional values from here to the dataset parameters  (sngl()  casts real*8 to real*4 for datreat)
!       call        setpar('l       ',sngl(l),nopar ,params,napar,mbuf, ier) 
!
       return
       end
!##########end######################################################################end

!      ==================================================
       subroutine local_example_s(t,result)

       implicit none
       double precision t, result
	    result=t
       return
       end
!      ==================================================
       real*8 function local_example_f(t)

       implicit none
       real*8 t
	    local_example_f=t
       return
       end

